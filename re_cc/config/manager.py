"""Configuration manager for Re-CC."""

import os
from typing import Any, Dict, Optional
import platformdirs
import yaml
from pydantic import BaseModel

from re_cc.security.keyring import KeyringManager


class ProviderConfig(BaseModel):
    """Configuration for an LLM provider."""
    
    provider: str
    model: Optional[str] = None
    endpoint: Optional[str] = None
    # API key is stored separately in keyring


class AppConfig(BaseModel):
    """Application configuration."""
    
    default_provider: str = "anthropic"
    providers: Dict[str, ProviderConfig] = {}


class ConfigManager:
    """Manages the application configuration."""
    
    def __init__(self) -> None:
        """Initialize the configuration manager."""
        self.config_dir = platformdirs.user_config_dir("re-cc")
        self.config_file = os.path.join(self.config_dir, "config.yaml")
        self.keyring = KeyringManager()
        
        # Create config directory if it doesn't exist
        os.makedirs(self.config_dir, exist_ok=True)
        
        # Load or create config
        self.config = self._load_config()
    
    def _load_config(self) -> AppConfig:
        """Load configuration from file or create default."""
        if os.path.exists(self.config_file):
            try:
                with open(self.config_file, "r") as f:
                    config_data = yaml.safe_load(f)
                return AppConfig(**config_data)
            except Exception:
                # If config is corrupt, create a new one
                return self._create_default_config()
        else:
            return self._create_default_config()
    
    def _create_default_config(self) -> AppConfig:
        """Create default configuration."""
        return AppConfig(
            default_provider="anthropic",
            providers={
                "anthropic": ProviderConfig(
                    provider="anthropic",
                    model="claude-3-opus-20240229",
                ),
                "openai": ProviderConfig(
                    provider="openai",
                    model="gpt-4o",
                ),
                "ollama": ProviderConfig(
                    provider="ollama",
                    endpoint="http://localhost:11434",
                    model="llama3",
                ),
            },
        )
    
    def _save_config(self) -> None:
        """Save configuration to file."""
        # Convert to dictionary with comments
        config_dict = self.config.model_dump()
        
        with open(self.config_file, "w") as f:
            # Add header comment
            f.write("# Re-CC Configuration File\n")
            f.write("# This file is automatically generated and updated by Re-CC\n")
            f.write("# You can manually edit this file, but it's recommended to use the configuration UI\n\n")
            
            # Use yaml.dump for the actual config
            yaml.dump(config_dict, f, default_flow_style=False, sort_keys=False)
    
    def get_provider_config(self, provider: str) -> Optional[ProviderConfig]:
        """Get configuration for a specific provider."""
        return self.config.providers.get(provider)
    
    def get_default_provider(self) -> str:
        """Get the default provider."""
        return self.config.default_provider
    
    def set_default_provider(self, provider: str) -> None:
        """Set the default provider."""
        if provider not in self.config.providers:
            raise ValueError(f"Provider '{provider}' not configured")
        
        self.config.default_provider = provider
        self._save_config()
    
    def update_provider(
        self,
        provider: str,
        api_key: Optional[str] = None,
        endpoint: Optional[str] = None,
        model: Optional[str] = None,
    ) -> None:
        """Update configuration for a provider."""
        # Get existing config or create new
        provider_config = self.config.providers.get(
            provider,
            ProviderConfig(provider=provider),
        )
        
        # Update fields if provided
        if endpoint is not None:
            provider_config.endpoint = endpoint
        
        if model is not None:
            provider_config.model = model
        
        # Update config
        self.config.providers[provider] = provider_config
        self._save_config()
        
        # Update API key if provided
        if api_key is not None:
            self.keyring.set_api_key(provider, api_key)
    
    def get_provider_api_key(self, provider: str) -> Optional[str]:
        """Get API key for a provider."""
        return self.keyring.get_api_key(provider)
    
    def get_all_providers(self) -> Dict[str, ProviderConfig]:
        """Get all configured providers."""
        return self.config.providers